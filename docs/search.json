[{"path":"index.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"\nDear ,\nWelcome Public health Dashboard Creation Course! name Jinha Yoon instructor course. researcher professor Yonsei University College Medicine, Department Preventive Medicine, Institute Occupational Health, 10 years experience field data analysis visualization public health.\n\ncourse, explore basics R Rstudio, flexdashboard package, Shiny. cover various components dashboard, including visualizations, text, interactivity, learn create dynamic interactive dashboards allow users explore data drill specific details.end course, skills knowledge necessary create effective dashboards using R, shiny flexdashboard package. Whether beginner experienced R user, course provide solid foundation creating sharing dashboards others.looking forward working helping achieve goals. questions concerns, please don’t hesitate reach .Best regards,\nJinha Yoon","code":""},{"path":"index.html","id":"prerequisite","chapter":"1 Introduction","heading":"1.1 Prerequisite","text":"Basic knowledge R tidyverse package prerequisite course. tidyverse package collection R packages provide consistent convenient interface data manipulation, exploration, visualization. course, use tidyverse package prepare clean data, well create visualizations.recommended students basic understanding R syntax, data structures, functions enrolling course. new R, many online resources tutorials available can help get started.already experience R, new tidyverse package, recommended spend time familiarizing package various components. many resources available online, including tutorials documentation, can help get started. already make Data manipulation R Course, related tidyverse packages.Overall, solid understanding R tidyverse package essential success course. hope information helps, look forward seeing class!","code":""},{"path":"rstudio-setting-cloud.html","id":"rstudio-setting-cloud","chapter":"2 Rstudio setting (Cloud)","heading":"2 Rstudio setting (Cloud)","text":"RStudio Cloud cloud-based platform data science data analysis using R programming language. provides users full-featured RStudio IDE (Integrated Development Environment) browser, eliminating need install R RStudio computers. makes easy users work R RStudio device internet connection.RStudio Cloud offers collaborative environment data analysis provides platform teams work together projects. also provides access powerful computing resources, users can work large data sets run complex analyses without worrying limitations computers.addition RStudio IDE, RStudio Cloud also provides platform hosting sharing R Shiny applications, R Markdown documents, data analysis projects. makes easy data scientists analysts share work others, whether collaboration sharing insights stakeholders.","code":""},{"path":"rstudio-setting-cloud.html","id":"how-to-start-rstudio-cloud","chapter":"2 Rstudio setting (Cloud)","heading":"2.1 How to start Rstudio Cloud","text":"Steps start using Rstudio CloudGo Rstudio Cloud website: https://rstudio.cloud/Click “Sign ” button top right corner.Enter email address create password create account.Verify email address.’re logged , can start new project clicking “New Project” button.Choose name project, select privacy setting, click “Create Project” button.Rstudio environment load browser, can start using R Rstudio.Note: already account, simply log existing email password start using Rstudio Cloud.like share video tutorial start using Rstudio Cloud. video walk process step--step, can start using . video can found following link: https://www.youtube.com/watch?v=ssxbi9nqpU0. encourage watch video follow along, provide clear understanding get started Rstudio Cloud. Let’s get started!","code":""},{"path":"rstudio-setting-cloud.html","id":"install-basic-r-packages","chapter":"2 Rstudio setting (Cloud)","heading":"2.2 Install basic R packages","text":"","code":""},{"path":"rstudio-setting-cloud.html","id":"how-to-install-r-packages","chapter":"2 Rstudio setting (Cloud)","heading":"2.2.1 how to install R packages","text":"install R package, can use install.packages() function R. ’s example install ggplot2 package:need run command , package installed system. package installed, can load R session using library() function:Using (!require(...)) statement can help check package installed load R session, one step. ’s example use (!require(...)) statement load ggplot2 package:ggplot2 package already installed, require() function load R session, install.packages() library() functions executed. package installed, require() function return FALSE, triggering installation loading package.Using (!require(…)) statement convenient way ensure necessary packages installed loaded R session, without manually check install time start new R session.","code":"\n\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\nif (!require(\"ggplot2\")) {\n  install.packages(\"ggplot2\")\n  library(ggplot2)\n}"},{"path":"rstudio-setting-cloud.html","id":"basic-r-packages-for-dashboard","chapter":"2 Rstudio setting (Cloud)","heading":"2.2.2 Basic R packages for dashboard","text":"create flexdashboard R, need use flexdashboard package. package provides framework creating interactive dynamic dashboards using R. addition flexdashboard package, tidyverse package also commonly used data manipulation, exploration, visualization. tidyverse collection R packages, including ggplot2, dplyr, tidyr, provide consistent convenient interface data manipulation, exploration, visualization.addition tidyverse, number R packages can used create visualizations dashboards. commonly used packages data visualization R include:ggplot2: powerful flexible data visualization package provides wide range visualizations, including bar charts, line charts, scatter plots, .ggplot2: powerful flexible data visualization package provides wide range visualizations, including bar charts, line charts, scatter plots, .plotly: package creating interactive visualizations, including line charts, bar charts, scatter plots, .plotly: package creating interactive visualizations, including line charts, bar charts, scatter plots, .shiny: package creating interactive web applications using R, including dashboards.shiny: package creating interactive web applications using R, including dashboards.leaflet: package creating interactive maps visualizations.leaflet: package creating interactive maps visualizations.DT: package creating interactive data tables visualizations.DT: package creating interactive data tables visualizations., Lets’ install packages. can use (!require(…)) statement check install multiple packages . ’s example can check install plotly, shiny, leaflet, DT, flexdashboard packages:code uses loop iterate list packages, package, checks ’s installed using require function. package installed, install load using library function. package already installed, code simply load without installing .","code":"\npackages <- c(\"tidyverse\", \"plotly\", \"shiny\", \"leaflet\", \"DT\", \"flexdashboard\")\n\nfor (package in packages) {\n  if (!require(package, character.only = TRUE)) {\n    install.packages(package)\n    library(package, character.only = TRUE)\n  }\n}"},{"path":"rstudio-chatgpt-addin.html","id":"rstudio-chatgpt-addin","chapter":"3 Rstudio ChatGPT addin","heading":"3 Rstudio ChatGPT addin","text":"original document GPT-3 addin https://github.com/MichelNivard/gptstudio. Please visit detail options tutorial. \nstep, summary steps add GPT-3 Rstudio:Make OpenAI account create API key.Set API key Rstudio either globally specific project.Install openai package gptstudio add-GitHub.Start GPT chat Rstudio using add-using openai package.’s important keep mind using tools involves sending text code OpenAI, ’s important aware data shared take steps protect sensitive information.","code":""},{"path":"rstudio-chatgpt-addin.html","id":"make-an-openai-api-key","chapter":"3 Rstudio ChatGPT addin","heading":"3.1 Make an OpenAI API key","text":"APIAPI stands Application Programming Interface. API set protocols, routines, tools building software applications. specifies software components interact APIs allow communication different systems.context web development, API defines set rules accessing web-based software application web tool. API implemented server can consumed client. client sends request API, API sends response back client. response typically includes data server, client can use applications website.Visit https://platform.openai.com/overviewTo get API key OpenAI, need visit OpenAI platform website (https://platform.openai.com/overview) log account. logged , able find API key account settings. can copy key use Rstudio project access OpenAI API use GPT-3.store API keySys.setenv(OPENAI_API_KEY = \"<APIKEY>\") R function sets environment variable R. case, setting OPENAI_API_KEY environment variable API key OpenAI API.Environment variables way store manage configuration settings program. setting OPENAI_API_KEY environment variable, can make API key available R code without hard-coding scripts. makes easier manage API key share code others without exposing API key.run Sys.setenv function, sets OPENAI_API_KEY environment variable API key specify place . openai package able access API key environment variable, allowing make API requests OpenAI.","code":"\nSys.setenv(OPENAI_API_KEY = \"<APIKEY>\")\n# for example\n# Sys.setenv(OPENAI_API_KEY = \"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\")"},{"path":"rstudio-chatgpt-addin.html","id":"install-packages-of-michelnivard","chapter":"3 Rstudio ChatGPT addin","heading":"3.2 install packages of MichelNivard","text":"code provided, require(devtools); install_github(“MichelNivard/gptstudio”), installs gptstudio add-Rstudio. devtools package required install packages GitHub, install_github function used install gptstudio package directly GitHub repository.gptstudio add-installed, able use start GPT chat perform tasks using GPT-3 Rstudio. Note still need set OpenAI API key install openai package, described earlier, order use gptstudio add-.","code":"\ninstall.packages(\"devtools\")\nrequire(devtools)\ninstall_github(\"MichelNivard/gptstudio\")"},{"path":"rstudio-chatgpt-addin.html","id":"let-start","chapter":"3 Rstudio ChatGPT addin","heading":"3.3 let’ start","text":"gptstudio add-Rstudio provides convenient way use GPT-3 text generation natural language processing tasks directly within Rstudio.use gptstudio add-, first need gptstudio package installed, described previous answer. package installed, can open R Markdown document Rstudio (text document) write text want generate response .Next, can select text want use prompt GPT-3 run gptstudio add-selecting Rstudio add-ins menu. add-send selected text OpenAI API prompt, API return response generated GPT-3.response GPT-3 returned R code string, can use R program manipulate desired. example, use response generate additional text answer questions.","code":""},{"path":"flexdashboard.html","id":"flexdashboard","chapter":"4 Flexdashboard","heading":"4 Flexdashboard","text":"Flexdashboard package creating interactive dashboards R. built top Shiny package, allows turn R code web application. Flexdashboard provides simple syntax defining structure dashboard allows add various types content text, plots, tables, .key features Flexdashboard:Layout DesignRows columns layoutScrolling optionTabsetsScaling sizeMultiple pagesVisualizationHTML widgetsdata tablesgaugesInteractivityIntegration ShinyNavigation barInput controlsReactive outputsStorytellingThe use storyboards","code":""},{"path":"flexdashboard.html","id":"layout-and-design","chapter":"4 Flexdashboard","heading":"4.1 Layout and Design","text":"","code":""},{"path":"flexdashboard.html","id":"rows-and-columns-layout","chapter":"4 Flexdashboard","heading":"4.1.1 Rows and columns layout","text":"level 2 markdown headers (represented —) used define columns within dashboard. column contains one charts, stacked vertically within column.can display row-wise specifying orientation: rows option. Following show layout defines two rows, first single chart second three charts:","code":""},{"path":"flexdashboard.html","id":"scrolling-option","chapter":"4 Flexdashboard","heading":"4.1.2 Scrolling option","text":"default, charts flexdashboard vertically stacked resized fit height browser window. However, many charts, may lead charts compressed difficult read.address issue, can use vertical_layout option control layout charts. vertical_layout option can set either fill scroll.vertical_layout: fill used, charts resized fill entire height browser window, even means compressing charts. default behavior flexdashboard.vertical_layout: scroll used, charts displayed natural height, user scroll see charts. useful many charts don’t want compressed.example , YAML header flexdashboard file specified vertical_layout: scroll, means charts displayed natural height page scroll necessary accommodate . way, charts displayed clearly, even many .","code":""},{"path":"flexdashboard.html","id":"tabsets","chapter":"4 Flexdashboard","heading":"4.1.3 Tabsets","text":"flexdashboard, can use tabset layout display multiple components within row column tabs. allows users switch components clicking tab labels. layout especially useful several components provide related information, one component primary seen readers.","code":""},{"path":"flexdashboard.html","id":"scaling-of-size","chapter":"4 Flexdashboard","heading":"4.1.4 Scaling of size","text":"data-width data-height attributes flexdashboard allow control relative size rows, columns, individual charts. attributes determine relative size charts laid dimension (horizontal vertical). using attributes, can customize sizing behavior charts adjust size charts suit nature charts desired emphasis, visualization types, etc. way, can ensure charts displayed appropriate size desired level detail, focus dashboard clear users.","code":""},{"path":"flexdashboard.html","id":"multiple-pages","chapter":"4 Flexdashboard","heading":"4.1.5 Multiple pages","text":"code snippet provided simple example create flexdashboard two pages. first line defines title dashboard “Page Orientation” output format flexdashboard.first page defined level 1 markdown header Page 1 (=====================================) containing two charts.second page defined level 1 markdown header Page 2 (=====================================) includes attribute data-orientation=rows. attribute specifies orientation content within page rows, means content arranged vertically rows.simple example, two pages dashboard defined orientation specified. first page include content, second page set display content rows.","code":""},{"path":"flexdashboard.html","id":"visualization","chapter":"4 Flexdashboard","heading":"4.2 Visualization","text":"","code":""},{"path":"flexdashboard.html","id":"html-widgets","chapter":"4 Flexdashboard","heading":"4.2.1 HTML widgets","text":"htmlwidget R package allows R users create interactive web-based visualizations using popular JavaScript libraries d3.js, leaflet, plotly, . context flexdashboard R package, htmlwidget can used add interactive visualizations flexdashboard.LeafletLeaflet popular open-source JavaScript library creating interactive maps. allows developers create maps can display various types geographic data, points, lines, polyggon shapes, well advanced features pop-ups, markers, custom icons. Leaflet designed lightweight, fast, easy use, making popular choice creating web maps variety applications.useufull information (http://rstudio.github.io/leaflet/)PlotlyPlotly data visualization library creating interactive visually appealing graphics. supports many types charts graphs, including bar charts, line charts, scatter plots, pie charts, . Plotly also provides tools streaming real-time updating graphs, well creating dashboards web-based visualizations. library available Python, R, JavaScript can used variety platforms, including Jupyter notebooks, standalone web applications, . Plotly known user-friendly interface ability handle large complex datasets.official Plotly homepage R language can found . https://plotly.com/r/DygraphsDygraphs fast, flexible, interactive JavaScript charting library R. designed visualize time-series data, can used plot types data well. Dygraphs supports multiple types charts, including line graphs, area graphs, bar graphs, . library highly customizable, allowing users change appearance charts suit needs.official homepage Dygraphs R can found https://rstudio.github.io/dygraphs/.rbokehrbokeh package R programming language provides interface Bokeh library creating interactive visualizations web browser. Bokeh popular library creating interactive visualizations Python, rbokeh provides way use capabilities R. rbokeh, can create wide range visualizations, including scatter plots, line charts, bar charts, , can easily customize appearance visualizations suit needs.official homepage rbokeh can found https://hafen.github.io/rbokeh/.highcharterhighcharter R package provides high-level interface Highcharts JavaScript library creating interactive visualizations web browser. Highcharts popular library creating interactive charts, highcharter provides way use capabilities R. highcharter, can create wide range visualizations, including bar charts, line charts, scatter plots, , can easily customize appearance visualizations suit needs.official homepage highcharter can found https://jkunst.com/highcharter/.visNetworkvisNetwork R package provides interface vis.js JavaScript library creating interactive network visualizations. Network visualizations used display relationships nodes, visNetwork provides way create types visualizations R. visNetwork, can create wide range network visualizations, including force-directed graphs, hierarchical graphs, , can easily customize appearance visualizations suit needs.official homepage visNetwork can found http://datastorm-open.github.io/visNetwork/.Detail tutorials packages can found elsewhere, soon.","code":""},{"path":"flexdashboard.html","id":"data-tables","chapter":"4 Flexdashboard","heading":"4.2.2 Data tables","text":"several ways include tabular data within flexdashboard, including using R functions renderTable() renderDataTable(). functions allow display data R data frames sources interactive tables within dashboard. tables can sorted, filtered, paginated, users can also export data various formats, CSV Excel.addition R functions, can also include tabular data within flexdashboard using HTML tables. allows control exact layout styling table, include custom features sorting filtering.","code":""},{"path":"flexdashboard.html","id":"valuebox-and-gauges","chapter":"4 Flexdashboard","heading":"4.2.3 ValueBox and Gauges","text":"value box simple, single value indicator flexdashboard. ’s used display single value compact format, often small accompanying icon color.gauge type chart used display single value within specified range. ’s used represent measurement value falls within defined range, level particular resource (e.g., water tank) progress toward goal.flexdashboard, value boxes gauges can created using R code shiny package. simple example create value box flexdashboard:Note value argument valueBox function sets value displayed box, subtitle argument sets text displayed beneath value, icon argument sets icon displayed next value.gauge function, value argument sets value displayed gauge, min max arguments set range gauge, symbol argument sets units value, gaugeSector argument sets color label different sections gauge.","code":""},{"path":"reivew-of-r-visualization-for-statistical-results.html","id":"reivew-of-r-visualization-for-statistical-results","chapter":"5 Reivew of R visualization for statistical results","heading":"5 Reivew of R visualization for statistical results","text":"","code":""},{"path":"reivew-of-r-visualization-for-statistical-results.html","id":"basic-plot-with-r","chapter":"5 Reivew of R visualization for statistical results","heading":"5.1 Basic plot with R","text":"chapter, cover basics plotting GGPLOT2, including principles layering aesthetics, common plot types. also introduce related libraries. end tutorial, working visualization example Data Explorer.","code":""},{"path":"reivew-of-r-visualization-for-statistical-results.html","id":"ggplot-basic","chapter":"5 Reivew of R visualization for statistical results","heading":"5.2 ggplot basic","text":"first step using ggplot2 load library data want use. case, loading tidyverse library, includes ggplot2, well helpful packages data manipulation visualization. also loading iris dataset, widely used dataset demonstrating basic data visualization techniques.main syntax ggplot2 includes axis layer. Let’s start beginning","code":"\nlibrary(tidyverse)\ndata(iris)"},{"path":"reivew-of-r-visualization-for-statistical-results.html","id":"axis","chapter":"5 Reivew of R visualization for statistical results","heading":"5.2.1 axis","text":"2-dimensional plot requires three components data: x-axis, y-axis, layer. First, draw x-axis y-axis, add information using layer componentThe code first loads iris data set, well-known data set R community contains information sepal length width iris flowers three different species.final plot show relationship sepal length width iris flowers, labeled axes title provides context.","code":"\niris %>% # data what we used\n  ggplot(aes(x = Sepal.Length, y = Sepal.Width))\niris %>% \n  ggplot(aes(x = Sepal.Length, y = Sepal.Width)) +\n  xlab(\"sepal length\") + ylab(\"sepal width\") +\n  ggtitle(\"Iris flowers and its characteristics\")"},{"path":"reivew-of-r-visualization-for-statistical-results.html","id":"layer-geom_x","chapter":"5 Reivew of R visualization for statistical results","heading":"5.2.2 layer, geom_x()","text":"ggplot2, layers components add plot represent data. geom_ functions used specify type layer add plot. example, geom_point adds points plot, geom_line adds lines, geom_smooth adds smoothing line, geom_histogram adds histogram, geom_density adds density plot, geom_boxplot adds boxplot, geom_bar adds bars.geom_ function takes aesthetics specified aes function input, maps x y variables create layer. can add multiple layers plot represent multiple variables create complex visualizations.","code":""},{"path":"reivew-of-r-visualization-for-statistical-results.html","id":"geom_point","chapter":"5 Reivew of R visualization for statistical results","heading":"5.2.3 geom_point()","text":"geom_point function used add layer points plot, representing individual observations iris data set. geom_point function takes aesthetics specified aes function maps x y variables create layer points.xlab function used add label x-axis, ylab function used add label y-axis. ggtitle function used add title plot. labels title provide context help interpret plot.geom_point function used add layer points plot, representing individual observations iris data set. geom_point function takes aesthetics specified aes function maps x y variables create layer points.aes function used specify aesthetics plot, including x y variables color variable, Species. allows plot distinguish three different species iris flowers data set display species different color.","code":"\niris %>%\n  ggplot(aes(x=Sepal.Length, y = Sepal.Width)) +\n  geom_point()\niris %>% \n  ggplot(aes(x = Sepal.Length, y = Sepal.Width)) +\n  xlab(\"Sepal length\") + \n  ylab(\"Sepal width\") +\n  ggtitle(\" Type of iris according to sepal lenght and width\") +\n  geom_point()\niris %>% \n\n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, \n             color = Species)) + \n  xlab(\"Sepal length\") + \n  ylab(\"Sepal width\") +\n  ggtitle(\" Type of iris according to sepal lenght and width\") +\n  geom_point()"},{"path":"reivew-of-r-visualization-for-statistical-results.html","id":"geom_smooth","chapter":"5 Reivew of R visualization for statistical results","heading":"5.2.4 geom_smooth()","text":"geom_smooth function used add layer smoothing line plot. line provides general representation relationship sepal length width iris flowers, helps see trends patterns data.geom_point function used add layer points plot, representing individual observations iris data set. geom_point function takes aesthetics specified aes function maps x y variables create layer points.following code demonstrated example adding linear trend line well polynomial line.second geom_smooth function adds layer linear trend line plot, using simple linear regression model specified formula y ~ x. argument se = FALSE used suppress display confidence intervals trend line, argument linetype = 2 used specify line type linear trend line.","code":"\niris %>% #\n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, \n             color = Species)) + \n  xlab(\"Sepal length\") + \n  ylab(\"Sepal width\") +\n  ggtitle(\" Type of iris according to sepal lenght and width\") +\n  geom_point() +\n  geom_smooth() \niris %>%\n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, \n             color = Species)) + \n  xlab(\"Sepal length\") + \n  ylab(\"Sepal width\") +\n  ggtitle(\" Type of iris according to sepal lenght and width\") +\n  geom_point() +\n  geom_smooth(method = 'lm', formula = y ~ poly(x, 5), se = FALSE, linetype = 1) + # how abou se = TRUE\n  geom_smooth(method = 'lm', formula = y ~ x, se = FALSE, linetype = 2)  "},{"path":"reivew-of-r-visualization-for-statistical-results.html","id":"faceting","chapter":"5 Reivew of R visualization for statistical results","heading":"5.2.5 faceting","text":"achieved using facet_wrap function, allows display multiple panels single plot, showing different subset data.case, facet_wrap function used create panels species iris, using Species variable grouping variable. formula Species~. specifies panel contain separate plot species, variables data set (represented .) included plot.\npolynomial linear trend lines added panel way previous code. labeled axes title provide context help interpret plot.","code":"\niris %>%\n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, \n             color = Species)) + \n  xlab(\"Sepal length\") + \n  ylab(\"Sepal width\") +\n  ggtitle(\" Type of iris according to sepal lenght and width\") +\n  geom_point() +\n  geom_smooth(method = 'lm', formula = y ~ poly(x, 5), se = FALSE, linetype = 1) +\n  geom_smooth(method = 'lm', formula = y ~ x, se = FALSE, linetype = 2)  +\n  facet_wrap(Species~.)"},{"path":"reivew-of-r-visualization-for-statistical-results.html","id":"geom_bar","chapter":"5 Reivew of R visualization for statistical results","heading":"5.2.6 geom_bar()","text":"code creates barplot using iris data set. ggplot function used create basic plot Species variable x-axis. aes function maps Species variable x axis fill aesthetic, controls fill color bars.geom_bar function used add layer bars plot, representing count species iris data set. default, geom_bar creates barplot bars representing count unique value x variable.ggplot function used create basic plot Species variable x-axis. aes function maps Species variable x axis fill aesthetic, controls fill color bars.geom_bar function used add layer bars plot, representing count species iris filtered data set. default, geom_bar creates barplot bars representing count unique value x variable.coord_polar function used change coordinate system rectangular Cartesian system polar system, appropriate creating pie charts. geom_bar function used add layer bars plot, representing count species iris filtered data set. width argument used set width bars 1, bars represent proportions rather counts.","code":"\niris %>% \n  ggplot(aes(x = Species,  \n             fill = Species)) +\n  xlab(\"Type of iris\") + \n  ylab(\"Counts\") +\n  ggtitle(\"Number of iris according to its types.\") +\n  geom_bar()\niris %>% \n  filter(Sepal.Width >3) %>% \n  ggplot(aes(x = Species,  \n             fill = Species)) +\n  xlab(\"Type of iris\") + \n  ylab(\"Counts\") +\n  ggtitle(\"Number of iris according to its types.\") +\n  geom_bar()\niris %>% \n  filter(Sepal.Width >3) %>% \n  ggplot(aes(x = Species,  \n             fill = Species)) +\n  xlab(\"Type of iris\") + \n  ylab(\"Counts\") +\n  ggtitle(\"Number of iris according to its types.\") +\n  geom_bar() +\n  geom_bar(width =1) + coord_polar()"},{"path":"reivew-of-r-visualization-for-statistical-results.html","id":"geom_density-geom_histogram","chapter":"5 Reivew of R visualization for statistical results","heading":"5.2.7 geom_density() , geom_histogram()","text":"ggplot function used create basic plot Sepal.Length variable x-axis. aes function maps Sepal.Length variable x axis.geom_histogram function used add layer histogram plot, representing distribution Sepal.Length. aes function inside geom_histogram maps y axis density, calculated using ..density.. expression.geom_density function used add layer kernel density estimate plot, representing estimated probability density function Sepal.Length variable.ggplot function used create basic plot Sepal.Length variable x-axis. aes function maps Sepal.Length variable x axis Species variable fill color.geom_histogram function used add layer histograms plot, representing distributions Sepal.Length species iris. aes function inside geom_histogram maps y axis density, calculated using ..density.. expression. alpha argument used set transparency histograms, allowing multiple histograms seen together.geom_density function used add layer kernel density estimates plot, representing estimated probability density functions Sepal.Length variable species iris. stat argument set “density” specify density estimate plotted. alpha argument used set transparency density estimates, allowing multiple density estimates seen together.geom_density function used add layer kernel density estimates plot, representing estimated probability density functions Sepal.Length variable species iris. stat argument set “density” specify density estimate plotted. alpha argument used set transparency density estimates, allowing multiple density estimates seen together.facet_wrap function used create panels plot, separated species. argument Species~. specifies panels created species, . symbol indicates faceting y axis.","code":"\niris %>% \n  ggplot(aes(x = Sepal.Length)) + \n  xlab(\"Sepal Length of Iris\") + \n  ylab(\"density\") +\n  ggtitle(\"Distribution of Sepal Length \") +\n  geom_histogram(aes(y = ..density..))+\n  geom_density()\niris %>% \n  ggplot(aes(x = Sepal.Length, fill = Species)) + \n  xlab(\"sepal length of iris\") + \n  ylab(\"density\") +\n  ggtitle(\"Distribution of sepal length of iris\") +\n  geom_histogram(aes(y = ..density..), alpha = 0.3)+\n  geom_density(stat=\"density\", alpha = 0.3) +\n  theme_minimal()\niris %>% \n  ggplot(aes(x = Sepal.Length, fill = Species)) + \n  xlab(\"sepal length of iris\") + \n  ylab(\"density\") +\n  ggtitle(\"Distribution of sepal length of iris\") +\n  geom_histogram(aes(y = ..density..), alpha = 0.3)+\n  geom_density(stat=\"density\", alpha = 0.3) +\n  theme_minimal() + # my favorit theme\n  facet_wrap(Species~.)"},{"path":"reivew-of-r-visualization-for-statistical-results.html","id":"geom_boxplot","chapter":"5 Reivew of R visualization for statistical results","heading":"5.2.8 geom_boxplot()","text":"geom_boxplot function used add layer boxplots plot, representing distributions Sepal.Width species iris. boxplot shows median, quartiles, outliers data, allowing quick visualization central tendency spread data.","code":"\niris %>% \n  ggplot(aes(x = Species, y = Sepal.Width, \n             color = Species)) +\n  geom_boxplot()"},{"path":"reivew-of-r-visualization-for-statistical-results.html","id":"d-plot","chapter":"5 Reivew of R visualization for statistical results","heading":"5.2.9 3d plot","text":"code creates 3D scatter plot using plot_ly function plotly library. plot_ly function creates basic plot Sepal.Length variable x-axis, Petal.Length variable y-axis, Petal.Width variable z-axis.color argument inside plot_ly function maps Species variable color markers, species iris plotted different color.type argument set “scatter3d”, specifies plot 3D scatter plot. alpha argument sets opacity markers, making semi-transparent overlapping markers can seen.layout function used add title axis, using xaxis, yaxis, zaxis arguments. title argument inside axis specifies title corresponding axis.","code":"\nlibrary(plotly)\niris %>%\nplot_ly( \n        x = ~Sepal.Length, y = ~Petal.Length, z = ~Petal.Width,  \n        color = ~Species,  # Color separation by Species. \n        type = \"scatter3d\",   # 3d plot\n        alpha = 0.8\n        ) %>%  \n        layout(\n               scene = list(xaxis = list(title = 'Sepal Length'), \n                            yaxis = list(title = 'Petal Length'),\n                            zaxis = list(title = 'Petal Width')))"},{"path":"hihih.html","id":"hihih","chapter":"6 hihih","heading":"6 hihih","text":"","code":"\nplot(1:10, 10:1)"},{"path":"parts.html","id":"parts","chapter":"7 Parts","heading":"7 Parts","text":"can add parts organize one book chapters together. Parts can inserted top .Rmd file, first-level chapter heading file.Add numbered part: # (PART) Act one {-} (followed # chapter)Add unnumbered part: # (PART\\*) Act one {-} (followed # chapter)Add appendix special kind un-numbered part: # (APPENDIX) stuff {-} (followed # chapter). Chapters appendix prepended letters instead numbers.","code":""},{"path":"footnotes-and-citations.html","id":"footnotes-and-citations","chapter":"8 Footnotes and citations","heading":"8 Footnotes and citations","text":"","code":""},{"path":"footnotes-and-citations.html","id":"footnotes","chapter":"8 Footnotes and citations","heading":"8.1 Footnotes","text":"Footnotes put inside square brackets caret ^[]. Like one 1.","code":""},{"path":"footnotes-and-citations.html","id":"citations","chapter":"8 Footnotes and citations","heading":"8.2 Citations","text":"Reference items bibliography file(s) using @key.example, using bookdown package (Xie 2023) (check last code chunk index.Rmd see citation key added) sample book, built top R Markdown knitr (Xie 2015) (citation added manually external file book.bib).\nNote .bib files need listed index.Rmd YAML bibliography key.RStudio Visual Markdown Editor can also make easier insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations","code":""},{"path":"blocks.html","id":"blocks","chapter":"9 Blocks","heading":"9 Blocks","text":"","code":""},{"path":"blocks.html","id":"equations","chapter":"9 Blocks","heading":"9.1 Equations","text":"equation.\\[\\begin{equation}\n  f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k}\n  \\tag{9.1}\n\\end{equation}\\]may refer using \\@ref(eq:binom), like see Equation (9.1).","code":""},{"path":"blocks.html","id":"theorems-and-proofs","chapter":"9 Blocks","heading":"9.2 Theorems and proofs","text":"Labeled theorems can referenced text using \\@ref(thm:tri), example, check smart theorem 9.1.Theorem 9.1  right triangle, \\(c\\) denotes length hypotenuse\n\\(\\) \\(b\\) denote lengths two sides, \n\\[^2 + b^2 = c^2\\]Read https://bookdown.org/yihui/bookdown/markdown-extensions--bookdown.html.","code":""},{"path":"blocks.html","id":"callout-blocks","chapter":"9 Blocks","heading":"9.3 Callout blocks","text":"R Markdown Cookbook provides help use custom blocks design callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html","code":""},{"path":"sharing-your-book.html","id":"sharing-your-book","chapter":"10 Sharing your book","heading":"10 Sharing your book","text":"","code":""},{"path":"sharing-your-book.html","id":"publishing","chapter":"10 Sharing your book","heading":"10.1 Publishing","text":"HTML books can published online, see: https://bookdown.org/yihui/bookdown/publishing.html","code":""},{"path":"sharing-your-book.html","id":"pages","chapter":"10 Sharing your book","heading":"10.2 404 pages","text":"default, users directed 404 page try access webpage found. ’d like customize 404 page instead using default, may add either _404.Rmd _404.md file project root use code /Markdown syntax.","code":""},{"path":"sharing-your-book.html","id":"metadata-for-sharing","chapter":"10 Sharing your book","heading":"10.3 Metadata for sharing","text":"Bookdown HTML books provide HTML metadata social sharing platforms like Twitter, Facebook, LinkedIn, using information provide index.Rmd YAML. setup, set url book path cover-image file. book’s title description also used.gitbook uses social sharing data across chapters book- links shared look .Specify book’s source repository GitHub using edit key configuration options _output.yml file, allows users suggest edit linking chapter’s source file.Read features output format :https://pkgs.rstudio.com/bookdown/reference/gitbook.htmlOr use:","code":"\n?bookdown::gitbook"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
